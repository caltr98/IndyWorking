package OldTests;

import IndyLibraries.DIDStructure;
import IndyLibraries.JSONUserCredentialStorage;
import IndyLibraries.StewardAgent;
import IndyLibraries.Trustee;
import org.hyperledger.indy.sdk.IndyException;
import org.hyperledger.indy.sdk.crypto.Crypto;
import org.hyperledger.indy.sdk.did.Did;
import org.hyperledger.indy.sdk.pairwise.Pairwise;
import org.hyperledger.indy.sdk.pool.Pool;
import org.json.JSONArray;
import org.json.JSONObject;

import javax.crypto.NoSuchPaddingException;
import java.io.File;
import java.io.IOException;
import java.security.NoSuchAlgorithmException;
import java.util.concurrent.ExecutionException;

public class SideSideTestIndy {
    public static void main(String[] args) {
        String poolName = "INDYSCANPOOL";
        //In Indy pre generated genesis transaction there are two DID for a Default Steward and a Default IndyLibraries.Trustee
        //which can be generated by those two Seeds.
        String stewardSeed = "000000000000000000000000Steward1";
        String trusteeSeed = "000000000000000000000000Trustee1";
        Pool pool = null;
        File agentsFile = new File("./agentsFile.json");
        JSONUserCredentialStorage jsonStoredCred = null;
        //University DID: L8m6zGD1RLXKD4hbYorhXe University VerKey:BRriQz9X2YiD2aDgyfPfnKnHzPeqhCVMbYbZ1U7YVGPV

        try {
            jsonStoredCred = new JSONUserCredentialStorage(agentsFile);
        } catch (NoSuchPaddingException | NoSuchAlgorithmException | IOException e) {
            e.printStackTrace();
        }
        try {
            Pool.setProtocolVersion(2).get();

            //1. Create and Open Pool
            //poolName = IndyLibraries.PoolUtils.createPoolLedgerConfig();

            //Pool.createPoolLedgerConfig(poolName,"{}").get();
            pool = Pool.openPoolLedger(poolName, "{}").get();
        } catch (InterruptedException | ExecutionException | IndyException e) {
            e.printStackTrace();
        }
        try {
            jsonStoredCred = new JSONUserCredentialStorage(agentsFile);
        } catch (NoSuchPaddingException | NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        System.out.println("Recupero credenziali Steward");
        Trustee Admin = new Trustee(pool, "trustee", jsonStoredCred);
        Admin.CreateWallet("trusteewallet", "pass");
        Admin.OpenWallet("trusteewallet", "pass");
        Admin.createDID(trusteeSeed);
        Admin.setDIDEndpoint("127:0:0:1:8086");
        Admin.setDIDMetadata("MYMETA-ADMIN-DATA");
        System.out.println("IndyLibraries.Trustee DID: " + Admin.getMainDID().didName + " " +
                "IndyLibraries.Trustee VerKey: " + Admin.getMainDID().didVerKey +" IndyLibraries.Trustee Endpoint: "
        +Admin.getDIDEndpoint()+ "IndyLibraries.Trustee Metadata: " + Admin.getDIDMetadata());


        StewardAgent Ministero = new StewardAgent(pool, "ministero", jsonStoredCred);
        Ministero.CreateWallet("stewardwallet", "pass");
        Ministero.OpenWallet("stewardwallet", "pass");
        Ministero.createDID();//this time it's another steward
        //qualify own DID
        //System.out.println("qualify DID "+
        //        Ministero.qualifyDID());
        Ministero.setDIDEndpoint("127:0:0:1:8087");
        Ministero.setDIDMetadata("MYMETA-MInistero-DATA");

        System.out.println("Steward DID: " + Ministero.getMainDID().didName + " " +
                "Steward VerKey: " + Ministero.getMainDID().didVerKey +" IndyLibraries.Trustee Endpoint: "
                +Ministero.getDIDEndpoint()+ "IndyLibraries.Trustee Metadata: " + Ministero.getDIDMetadata());

        try {
            //prima store their did
            Did.storeTheirDid(Admin.mainWallet,new JSONObject().put("did",Ministero.mainDID.didName).
                    put("verkey",Ministero.mainDID.didVerKey).toString()).get();
            //poi crea pairwise, quando creo pairwise vuol dire che segno il did che sto usando nella
            //consersazione con quel specifico theirDID
            Pairwise.createPairwise(Admin.mainWallet,Ministero.getMainDID().didName,
                    Admin.mainDID.didName,"").get();
            String PairWiseFromWallet = Pairwise.getPairwise(Admin.mainWallet,Ministero.mainDID.didName).get();
            System.out.println("PairWiseFromWallet "+PairWiseFromWallet);
            System.out.println("List PairWise in the Wallet: "+ Pairwise.listPairwise(Admin.mainWallet));


            Did.storeTheirDid(Ministero.mainWallet,new JSONObject().put("did",Admin.mainDID.didName).
                    put("verkey",Admin.mainDID.didVerKey).toString()).get();
            //Pairwise.createPairwise(Ministero.mainWallet,Admin.getMainDID().didName,
              //      Ministero.mainDID.didName,"").get();

            //grazie a pairwise
            byte[] packedData=Crypto.packMessage(Ministero.mainWallet,
                    String.valueOf(new JSONArray(new String[] {Did.keyForLocalDid(Ministero.mainWallet,
                            Admin.mainDID.didName).get()})),
                    Did.keyForLocalDid(Ministero.mainWallet,Ministero.mainDID.didName).get()
                    ,(Ministero.mainDID.didName+"-"+Ministero.mainDID.didVerKey).getBytes()).get();

            JSONObject unpackedJSON=new JSONObject(new String(Crypto.unpackMessage(Admin.mainWallet,packedData).get()));
            String unpacked=(String) unpackedJSON.get("message");
            String didInfo[] = unpacked.split("-");
            System.out.println("dataUnPackeed: "+unpacked);
            boolean feedback = Admin.assignStewardRole(new DIDStructure(didInfo[0],didInfo[1]));
            System.out.println("assign successfull?"+feedback);
            //only owner can modify his own attributes
            boolean risATTRIB=Ministero.addENdpointToNYM("local",
                    "127:0:0:8087" );
            System.out.println("Attrib transaction success "+risATTRIB);

        } catch (InterruptedException e) {
            e.printStackTrace();
        } catch (ExecutionException e) {
            e.printStackTrace();
        } catch (IndyException e) {
            e.printStackTrace();
        }


        System.out.println("stewarding role assigned");
        String nymonledger=Admin.getNYMFromLedger(Ministero.mainDID.didName);

        System.out.println("nym\n"+
                nymonledger);

        String attribFromLedger=Ministero.getATTRIBFromLedger(Admin.mainDID.didName,"endpoint");
        System.out.println("ENDPOINT!! \n"+
                attribFromLedger);


    }

}
